.\" Copied from the OpenCBM Users Guide, written by:
.\"   Michael Klein <nip@c64.org>
.\"   Spiro Trikaliotis <cbm4win@trikaliotis.net>
.\"   Wolfgang Moser <d81.de>
.\"
.\" Converted to nroff by:
.\"   Frédéric Brière <fbriere@fbriere.net>
.\"
.TH CBMCTRL "1" "2009-12-19" "OpenCBM 0.4.3" "User Commands"
.SH NAME
cbmctrl \- send commands to serial CBM devices
.SH SYNOPSIS
.B cbmctrl
.I action
.RI [ action_args ]
.PP
.B cbmctrl \-\-help
.RI [ action ]
.PP
.B cbmctrl \-\-version
.SH DESCRIPTION
.B cbmctrl
is used to send commands to external devices.
It can control all kinds of serial CBM devices like floppy drives and
printers.
So far, it has been successfully tested with the disk drives 1541(-II),
1571 and a MPS-1200 printer.
.SH OPTIONS
.TP
\fB\-h\fP, \fB\-\-help\fP [\fIaction\fP]
Outputs the help screen with a short listing of all available actions.
If the optional
.I action
name is given also, you retrieve more information on a special action
together with its arguments and parameters.
.TP
.BR \-V ", " \-\-version
Output version information as well as the build date and time.
.SH ACTIONS
.SS Available actions
.PD 0
.TP 12
.B reset
\- Reset all drives on the IEC bus
.TP
.B detect
\- Detect all drives on the IEC bus
.TP
.B lock
\- Lock the parallel port for OpenCBM use
.TP
.B unlock
\- Unlock the parallel port from exclusive usage
.TP
.B listen
\- Perform a listen on the IEC bus
.TP
.B talk
\- Perform a talk on the IEC bus
.TP
.B unlisten
\- Perform an unlisten on the IEC bus
.TP
.B untalk
\- Perform an untalk on the IEC bus
.TP
.B open
\- Perform an open on the IEC bus
.TP
.B close
\- Perform a close on the IEC bus
.TP
.B popen
\- Same as open, but with ASCII to PETSCII conversion
.TP
.B read
\- Get a stream of raw data from an IEC bus device
.TP
.B write
\- Put a stream of raw data to an IEC bus device
.TP
.B status
\- Give the status of a specified drive
.TP
.B command
\- Issue a command to a specified drive
.TP
.B pcommand
\- Same as command, with ASCII to PETSCII conversion
.TP
.B dir
\- Output the directory of a disk in a specified drive
.TP
.B download
\- Download memory contents from a floppy drive
.TP
.B upload
\- Upload memory contents to a floppy drive
.TP
.B change
\- Wait for a disk to be changed in a specified drive
.PD
.SS Common action arguments
Many of the
.B cbmctrl
subcommands understand the following common arguments:
.TP
.I device
Advise
.B cbmctrl
to direct its communication to the IEC bus device with the number
.IR device .
IEC bus device numbers can be denoted in the range from 0 to 30,
although no Commodore device is known to use device numbers 0 to 3.
Most commonly used are the numbers 4 (printer) and 8 to 11 (disk
drives).
Device number 31 is used to denote the
.SM UNTALK
respectively
the
.SM UNLISTEN
command code on the IEC bus instead of the
.SM TALK
respectively
.SM LISTEN command code, therefore device address 31
cannot be used in general.
.TP
.I secadr
With several
.B cbmctrl
actions the secondary address parameter
.I secadr
denotes a dedicated logical communication channel for the specified
.IR device .
IEC bus channel numbers can be denoted in the range from 0 to 15.
Take note that for floppy disk drive devices some secondary
addresses are interpreted in a special way.
Secondary address 0 is used, when a program is loaded, address 1, when
a program is saved.
Address number 15 represents the command channel of the disk drive, so
effectively, for bulk data transfers to and from disk drives, only the
logical channel numbers 2 to 14 can be used.
.SS Action descriptions
.TP
.BI reset
This action performs a hardware reset of all devices attached to the IEC bus.
Control is returned after it is made sure that all devices are ready.
.TP
.BI detect 
This action tries to detect all devices attached to the IEC bus.
For this, this subcommand accesses all possible devices and tries to
read some bytes from its memory.
If a devices is detected, its name is output.
Additionally, this routine determines if the device is connected via a
parallel cable (XP1541 companion cable, may be true for disk drives
only).
.TP
.BI lock
This command locks the parallel port for exclusive use by OpenCBM, so
that sequences of e.g.
.BR talk / read / untalk
commands are not broken by concurrent processes wanting to access the
parallel port.
.IP ""
You should issue
.B cbmctrl lock
before doing any access to OpenCBM tools, and
.B cbmctrl unlock
after you are done.
.TP
.BI unlock
This command unlocks the parallel port after the use by OpenCBM.
.IP ""
You should issue
.B cbmctrl lock
before doing any access to OpenCBM tools, and
.B cbmctrl unlock
after you are done.
.TP
.BI listen " device secadr"
Tell device
.I device
to listen on secondary address
.IR secadr .
Until the next
.B unlisten
command, everything output with
.B cbmctrl write
will be received by this device.
.IP ""
This command corresponds to the following 6502 assembly code on a C64:
.PP
.RS
.RS
.PD 0
lda #dev
.PP
jsr $ffb1
.PP
lda #sa
.PP
ora #$60
.PP
jsr $ff93
.PD
.RE
.RE
.TP
.BI talk " device secadr"
Tell device
.I device
to talk on secondary address
.IR secadr .
Until the next
.B untalk
command, data from this device can be received by using the command
.BR "cbmctrl read" .
.IP ""
This command corresponds to the following 6502 assembler code on a C64:
.PP
.RS
.RS
.PD 0
lda #dev
.PP
jsr $ffb4
.PP
lda #sa
.PP
ora #$60
.PP
jsr $ff96
.PD
.RE
.RE
.TP
.BI unlisten
Ends communication with listening devices after a
.B listen
command.
This corresponds to the C64 kernel routine $ffae.
.TP
.BI untalk
Ends communication with talking devices after a
.B talk
command.
This corresponds to the C64 kernel routine $ffab.
.TP
.BI open " device secadr filename"
Open file
.I filename
on device
.IR device .
After opening, data can be read/written by sending a
.B talk
resp.
.B listen
command with the secondary address
.IR secadr .
.IP ""
If
.I secadr
is greater than 1, the file type and access mode must also be specified
by appending
.RI `, type , mode '
to
.IR filename .
Valid types are
.BR D ,
.BR P ,
.BR S ,
.BR U ,
.BR R
(DEL, PRG, SEQ, USR, REL), valid modes are
.B R
for reading and
.B W
for writing.
.IP ""
Note: You cannot do an open without a filename.
Although a CBM machine (i.e., a C64) allows this, this is an internal
operation for the Computer only.
It does not have any effect on the IEC bus.
.IP ""
.B cbmctrl open
does not change any character encoding, that is, it does not convert
between ASCII (used by the PC) and PETSCII (used by the CBM device).
If this is needed, use
.B cbmctrl popen
instead.
.TP
.BI popen " device secadr filename"
Like
.BR "cbmctrl open" ,
but converts the filename from ASCII to PetSCII before sending it to the
floppy.
.TP
.BI close " device secadr"
Close the file associated with secondary address
.I secadr
on device
.IR device .
.TP
\fBread\fP [\fIfile\fP]
This command reads raw data from the IEC bus and outputs it into the
given file, or to stdout if no file is given (or if it is a simple dash,
`\-').
.TP
\fBwrite\fP [\fIfile\fP]
This command writes raw data to the IEC bus; the data is taken from the
given file, or from stdin if no filename is given (or if it is a simple
dash, `\-').
.TP
.BI status " device"
Copies input from device
.IR device ,
secondary address 15 (command/status channel), to standard output stream.
Note that all upper case characters are changed to lower case.
Carriage return (0x0d) is also changed to the current operating system's
line ending convention (0x0a on Unix oriented systems, 0x0d 0x0a on
Windows oriented systems or whatever else is appropriate for your
operating system).
.IP ""
Assuming the device number is 8, this command is similar to (in this
case, no character conversions would be made):
.PP
.RS
.RS
.PD 0
cbmctrl lock
.PP
cbmctrl talk 8 15
.PP
cbmctrl read
.PP
cbmctrl untalk
.PP
cbmctrl unlock
.PD
.RE
.RE
.TP
.BI command " device cmdstr"
Sends
.I cmdstr
to device
.IR device ,
secondary address 15 (command/status channel).
Since there is no PetSCII\(->ASCII conversion, commands must be sent in
upper case (kind of poor man's PetSCII conversion).
This is because charset conversion would break the M-W and M-E commands.
.IP ""
Note: If you need PetSCII\(->ASCII conversion, use
.B pcommand
instead.
.IP ""
Assuming the device number is 8, this command is identical to (Note:
This does not work on Windows, because
.B echo
there does not know the
.B \-n
option.)
.PP
.RS
.RS
.PD 0
cbmctrl lock
.PP
cbmctrl listen 8 15
.PP
echo \-n cmdstr | cbmctrl write \-
.PP
cbmctrl unlisten
.PP
cbmctrl unlock
.PD
.RE
.RE
.TP
.BI pcommand " device cmdstr"
Like
.BR command ,
but converts the data from ASCII to PetSCII before sending it.
.TP
.BI dir " device"
Read directory from disk in device
.IR device ,
print on standard out.
.TP
\fBdownload\fP \fIdevice\fP \fIaddress\fP \fIcount\fP [\fIfile\fP]
Read
.I count
bytes from drive memory, starting at
.I address
via one or more M-R commands.
Memory contents are written to standard output if
.I file
is ommited or equivalent to `\-'.
.TP
\fBupload\fP \fIdevice\fP \fIaddress\fP [\fIfile\fP]
Send
.I file
to drive memory, starting at
.I address
via one or more M-W commands.
If
.I address
is \-1, the first two bytes from file are considered as start address.
Reads standard input if
.I file
is ommited or equivalent to `\-'.
.TP
.BI change " device"
Wait for a disk to be changed in the specified device.
It waits for the current disk to be removed, for a new disk to be
inserted and for the drive door to be closed.
It does not return until the disk is ready to be read or written.
.SH EXAMPLES
.PP
Send file contents to printer 4:
.PP
.RS
.PD 0
cbmctrl lock
.PP
cbmctrl listen 4 0
.PP
cbmctrl write file
.PP
cbmctrl unlisten
.PP
cbmctrl unlock
.PD
.RE
.PP
Copy file to disk drive 8:
.PP
.RS
.PD 0
cbmctrl lock
.PP
cbmctrl open 8 2 FILENAME,P,W
.PP
cbmctrl listen 8 2
.PP
cbmctrl write file
.PP
cbmctrl unlisten
.PP
cbmctrl close 8 2
.PP
cbmctrl unlock
.PD
.RE
.PP
Copy file from disk drive 8:
.PP
.RS
.PD 0
cbmctrl lock
.PP
cbmctrl open 8 2 CBMNAME,P,R
.PP
cbmctrl talk 8 2
.PP
cbmctrl read file
.PP
cbmctrl untalk
.PP
cbmctrl close 8 2
.PP
cbmctrl unlock
.PD
.RE
.PP
Dump 1541 ROM:
.PP
.RS
cbmctrl download 8 0xc000 0x4000 > 1541.rom
.RE
or
.RS
cbmctrl download 8 0xc000 0x4000 1541.rom
.RE
.TP
Write file buffer2.bin to drive 9, address 0x500:
.PP
.RS
cbmctrl upload 9 0x500 buffer2.bin
.RE
.SH SEE ALSO
.BR cbmformat (1),
.BR cbmforng (1),
.BR cbmcopy (1),
.BR d64copy (1)
